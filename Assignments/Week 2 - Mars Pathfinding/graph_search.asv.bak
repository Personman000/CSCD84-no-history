%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CSC D84 - Artificial Intelligence - Winter 2020
%
% This function will perform a graph search (UCS) on the
% given input graph.
%
% The graph is passed in as an adjacency list as defined in
% MARS_pathfinding.m (see that script for a description)
%
% You have to implement the search process. You're free to
% do this however you like (i.e. use recursion, or not,
% it's up to you). 
%
% Remember:
% For UCS you need to keep track of the current lowest cost
%  to nodes in the graph (initially this is unknown for all
%  nodes except for s, with cost zero)
% UCS expands next the UNEXPANDED node with lowest cost
%  NO LOOPS ARE ALLOWED - you should NEVER expand a node twice
% You need to keep track of the predecessor for each node
%  so you can build the path at the end.
%
% You can use arrays for the costs and predecessors, or you can use
% whatever other data structure you find helps you do your work.
%
% THE SEARCH FUNCTION MUST RETURN A PATH AS A SEQUENCE OF NODES 
% TO VISIT - the first entry in the path is the start node's index
% and the last entry is the goal node's index.
%
% You can prepend entries to the Path variable below like so:
% Path=[new_index Path];    <- To append, change the order!
%
% Input parameters:
%
% - A graph 'G' of size Nx4 where N is the number of nodes in the graph
% and edges are real valued (the function should not assume the 
% edges are positive, the absence of an edge between two nodes is
% indicated by the value 1e9).
%
% - An array Gid that gives the indexes of the neighbours for each
% node in the graph, as explained in MARS_pathfinding.m
%
% - The index of the start node 's', and the goal node 'g' (we are
% using this function to find a path between two nodes). UCS will
% return the lowest-cost path between 's' and 'g' if edge weights 
% are positive. If there are negative edges, the caveats we
% have discussed apply.
%
% Return values:
%
% The PATH that the function has found, it can be empty if there is no
% path between the nodes.
%
% Starter code: F. Estrada, Jan 2020.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Path]=graph_search(G,Gid,s,g)

Path=[];

%% TO DO:
% Implement Uniform Cost Search here

%% Cost Search
% Initialize queues
Open=zeros(1,3);                % [node_index, cost_from_start, node_parent_index]
Visited=zeros(1,2);             % [node_index, node_parent_index]

% Start at start node
Open = [s 0 -1];

curr_node = [];

% Loop through nodes until the goal is found
while(~ismember(g, Visited))
    curr_node_index = Open(1);
    
    % Loop through neighbors
    for i=1:4
        curr_node_neighbor_index = Gid(curr_node_index, i);
        if(curr_node_neighbor_index~=-1 & ~ismember(curr_node_neighbor_index, Open(:,1)))
            % Add current neighbor to Open list
            Open = [Open;[curr_node_neighbor_index Open(1,2)+G(curr_node_index,i) curr_node_index]];
        end
    end
    
    % Add current node and current node parent to Visited list
    Visited = [Visited;Open(1,1) Open(1,3)]
    
    % Remove current node from Open list
    Open = Open(2:end,:);
end

while(~ismember(s, Path))
    Path = [curr_node_index Path];
    curr_node
    curr_node_index = find(Visited==
end

return;